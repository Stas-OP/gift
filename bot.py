import logging
import json
import ssl
import certifi
import urllib3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
from cat import Cat
from datetime import datetime
import pytz

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_cats():
    try:
        with open('cats_data.json', 'r', encoding='utf-8') as file:
            try:
                data = json.load(file)
                loaded_cats = {}
                for user_id, cat_data in data.items():
                    cat = Cat(
                        cat_data['name'],
                        cat_data.get('color', '—Å–µ—Ä—ã–π'),
                        cat_data.get('owner_m', '–°—Ç–∞—Å'),
                        cat_data.get('owner_f', '–ú–∞—à–∞'),
                        cat_data.get('created_at')
                    )
                    cat.hunger = cat_data['hunger']
                    cat.happiness = cat_data['happiness']
                    cat.energy = cat_data['energy']
                    cat.last_update = cat_data['last_update']
                    cat.walk_time = cat_data.get('walk_time')
                    cat.last_walk_notification = cat_data.get('last_walk_notification')
                    cat.last_love_message = cat_data.get('last_love_message')
                    cat.love_message_time = cat_data.get('love_message_time')
                    loaded_cats[int(user_id)] = cat
                return loaded_cats
            except json.JSONDecodeError:
                return {}
    except FileNotFoundError:
        with open('cats_data.json', 'w', encoding='utf-8') as file:
            json.dump({}, file)
        return {}

def save_cats():
    data = {}
    for user_id, cat in cats.items():
        data[user_id] = {
            'name': cat.name,
            'color': cat.color,
            'owner_m': cat.owner_m,
            'owner_f': cat.owner_f,
            'hunger': cat.hunger,
            'happiness': cat.happiness,
            'energy': cat.energy,
            'last_update': cat.last_update,
            'created_at': cat.created_at,
            'walk_time': cat.walk_time,
            'last_walk_notification': cat.last_walk_notification,
            'last_love_message': cat.last_love_message,
            'love_message_time': cat.love_message_time
        }
    with open('cats_data.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4, default=str)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cats = load_cats()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ç–∏–∫–∞
CHOOSING_NAME, CHOOSING_COLOR, SETTING_WALK_TIME = range(3)

# –ò–∑–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π
CAT_COLORS = {
    "–°–µ—Ä—ã–π": "—Å–µ—Ä—ã–π",
    "–ë–µ–ª—ã–π": "–±–µ–ª—ã–π",
    "–†—ã–∂–∏–π": "—Ä—ã–∂–∏–π",
    "–ß—ë—Ä–Ω—ã–π": "—á—ë—Ä–Ω—ã–π"
}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤
COLOR_CASES = {
    "—Å–µ—Ä—ã–π": "—Å–µ—Ä–æ–≥–æ",
    "–±–µ–ª—ã–π": "–±–µ–ª–æ–≥–æ",
    "—Ä—ã–∂–∏–π": "—Ä—ã–∂–µ–≥–æ",
    "—á—ë—Ä–Ω—ã–π": "—á—ë—Ä–Ω–æ–≥–æ"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in cats:
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑ÔøΩÔøΩ–∞–¥–∏–º –∫–æ—Ç–∏–∫–∞! –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å?",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING_NAME
    else:
        await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ—Ç–∏–∫! üê±")
        await show_main_menu(update, context)
        return ConversationHandler.END

async def choose_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cat_name'] = update.message.text
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–°–µ—Ä—ã–π ‚¨úÔ∏è", callback_data='color_—Å–µ—Ä—ã–π'),
            InlineKeyboardButton("–ë–µ–ª—ã–π ‚¨úÔ∏è", callback_data='color_–±–µ–ª—ã–π')
        ],
        [
            InlineKeyboardButton("–†—ã–∂–∏–π üüß", callback_data='color_—Ä—ã–∂–∏–π'),
            InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π ‚¨õÔ∏è", callback_data='color_—á—ë—Ä–Ω—ã–π')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞:",
        reply_markup=reply_markup
    )
    return CHOOSING_COLOR

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    if query.data == 'remove_walk_time':
        if user_id not in cats:
            await query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
            return
        
        cat = cats[user_id]
        if cat.remove_walk_time():
            save_cats()
            await query.message.delete()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
                    InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
                ],
                [
                    InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
                    InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
                ]
            ]
            inline_markup = InlineKeyboardMarkup(keyboard)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            image_path = cat.get_status_image()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
            await context.bot.send_message(
                chat_id=user_id,
                text="–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —É–¥–∞–ª–µ–Ω–æ!"
            )
            await context.bot.send_photo(
                chat_id=user_id,
                photo=open(image_path, 'rb'),
                caption="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
                reply_markup=inline_markup
            )
            return ConversationHandler.END
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    if query.data == 'back_to_menu':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
        await query.message.delete()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
                InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
            ],
            [
                InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
                InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        cat = cats[user_id]
        image_path = cat.get_status_image()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
        await query.message.reply_photo(
            photo=open(image_path, 'rb'),
            caption="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
            InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
        ],
        [
            InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
        ]
    ]
    inline_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
    keyboard_button = ReplyKeyboardMarkup(
        [
            ["üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º", "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏"]
        ], 
        resize_keyboard=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    if query.data == 'set_walk_time':
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
        )
        return SETTING_WALK_TIME

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    if query.data.startswith('color_'):
        if 'cat_name' not in context.user_data:
            await query.message.edit_text(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start",
                reply_markup=InlineKeyboardMarkup([[]])
            )
            return ConversationHandler.END
            
        color = query.data.replace('color_', '')
        cats[user_id] = Cat(context.user_data['cat_name'], color)
        save_cats()
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {color.capitalize()} –∫–æ—Ç–∏–∫ {context.user_data['cat_name'].capitalize()} –ø–æ—è–≤–∏–ª—Å—è —É –≤–∞—Å! üê±",
            reply_markup=keyboard_button
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤ÔøΩÔøΩ–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞
        await query.message.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    if user_id not in cats:
        await query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
        return

    cat = cats[user_id]
    cat.update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.delete()
    except:
        pass

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    message = ""
    if query.data == 'feed':
        message = cat.feed()
    elif query.data == 'play':
        message = cat.play()
    elif query.data == 'sleep':
        message = cat.sleep()
    elif query.data == 'status':
        message = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞:"
    
    # –ì–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    image_path = cat.get_status_image()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await query.message.reply_photo(
        photo=open(image_path, 'rb'),
        caption=f"{message}\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=inline_markup
    )
    
    save_cats()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
            InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
        ],
        [
            InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
        ]
    ]
    inline_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
    keyboard_button = ReplyKeyboardMarkup(
        [
            ["üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º", "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏"]
        ], 
        resize_keyboard=True
    )
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            text="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        # –îÔøΩÔøΩ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="",
            reply_markup=keyboard_button
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
        await update.message.reply_text(
            text="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="",
            reply_markup=keyboard_button
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏
async def handle_keyboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º":
        user_id = update.effective_user.id
        if user_id not in cats:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
            return

        cat = cats[user_id]
        cat.update_stats()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞ÔøΩÔøΩ—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
                InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
            ],
            [
                InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
                InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        image_path = cat.get_status_image()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
        await update.message.reply_photo(
            photo=open(image_path, 'rb'),
            caption="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
    elif update.message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏":
        user_id = update.effective_user.id
        if user_id not in cats:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
            return
        
        cat = cats[user_id]
        keyboard = []
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        if cat.walk_time:
            keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏", callback_data='remove_walk_time')])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='back_to_menu')])
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(pytz.timezone('Asia/Novosibirsk')).strftime("%H:%M")
        message_text = f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
        
        if cat.walk_time:
            message_text += f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: {cat.walk_time}\n\n"
            
        message_text += ("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
            "‚Ä¢ –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14.30)\n"
            "‚Ä¢ –ß–ß –∏–ª–∏ –ß (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14 –∏–ª–∏ 9 - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª–æ —á–∞—Å–∞)")
        
        await update.message.reply_text(
            message_text,
            reply_markup=inline_markup
        )
        return SETTING_WALK_TIME

async def set_walk_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in cats:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞!")
        return ConversationHandler.END

    time_str = update.message.text
    cat = cats[user_id]
    
    if cat.set_walk_time(time_str):
        save_cats()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(pytz.timezone('Asia/Novosibirsk')).strftime("%H:%M")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n"
                 f"–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {cat.walk_time}! –Ø –Ω–∞–ø–æ–º–Ω—é –∑–∞ —á–∞—Å –∏ –∑–∞ –ø–æ–ª—á–∞—Å–∞ –¥–æ –ø—Ä–æ–≥—É–ª–∫–∏."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        image_path = cat.get_status_image()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
                InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
            ],
            [
                InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
                InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
        await update.message.reply_photo(
            photo=open(image_path, 'rb'),
            caption="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        return ConversationHandler.END
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now(pytz.timezone('Asia/Novosibirsk')).strftime("%H:%M")
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
            "‚Ä¢ –ß–ß.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14.30)\n"
            "‚Ä¢ –ß–ß –∏–ª–∏ –ß (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14 –∏–ª–∏ 9 - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—á–∞–ª–æ —á–∞—Å–∞)"
        )
        return SETTING_WALK_TIME

async def check_walk_notifications(context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now(pytz.timezone('Asia/Novosibirsk'))
    logging.info(f"Checking notifications at {current_time}")
    
    for user_id, cat in cats.items():
        try:
            logging.info(f"Checking cat {cat.name} for user {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–µ
            notification = cat.should_notify(current_time)
            if notification == "time_to_go":
                logging.info(f"Sending time to go notification to user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üö∂‚Äç‚ôÄÔ∏è –ü–æ—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É!"
                )
                save_cats()
            elif notification == "hour":
                logging.info(f"Sending hour notification to user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üö∂‚Äç‚ôÇÔ∏è –ß–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É! (–≤ {cat.walk_time})"
                )
                save_cats()
            elif notification == "half_hour":
                logging.info(f"Sending half hour notification to user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üö∂‚Äç‚ôÇÔ∏è –ß–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞ –ø–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É! (–≤ {cat.walk_time})"
                )
                save_cats()
            elif notification == "ten_minutes":
                logging.info(f"Sending 10 minutes notification to user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üö∂‚Äç‚ôÇÔ∏è –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Ä–∞ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É! (–≤ {cat.walk_time})"
                )
                save_cats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª—é–±–≤–∏
            if cat.should_send_love(current_time):
                logging.info(f"Sending love message to user {user_id}")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=cat.get_love_message()
                )
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
            logging.exception("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder()\
        .token('7817658003:AAEnIHuifYCCoV7oXiSU-1tneodSh6EzNDU')\
        .build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ç–∏–∫–∞
    create_cat_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_name)],
            CHOOSING_COLOR: [CallbackQueryHandler(button_handler, pattern='^color_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    walk_time_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏$"), handle_keyboard_button)],
        states={
            SETTING_WALK_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_walk_time),
                CallbackQueryHandler(button_handler, pattern='^back_to_menu$'),
                CallbackQueryHandler(button_handler, pattern='^remove_walk_time$')
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(create_cat_handler)
    application.add_handler(walk_time_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º$"), handle_keyboard_button))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏$"), handle_keyboard_button))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = application.job_queue
    job_queue.run_repeating(check_walk_notifications, interval=60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()