import time
from datetime import datetime, timedelta
import pytz
from image_generator import ImageGenerator
import logging

class Cat:
    def __init__(self, name, color="—Å–µ—Ä—ã–π", owner_m="–°—Ç–∞—Å", owner_f="–ú–∞—à–∞", created_at=None):
        self.name = name
        self.color = color
        self.owner_m = owner_m
        self.owner_f = owner_f
        self.hunger = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.happiness = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.energy = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.last_update = datetime.now(pytz.timezone('Asia/Novosibirsk')).isoformat()
        self.created_at = created_at or datetime.now(pytz.timezone('Asia/Novosibirsk')).isoformat()
        self.image_generator = ImageGenerator()
        self.walk_time = None  # –í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        self.last_walk_notification = None  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    def set_walk_time(self, time_str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            if '.' in time_str:
                # –§–æ—Ä–º–∞—Ç XX.XX
                hour, minute = map(int, time_str.split('.'))
            elif ':' in time_str:
                # –§–æ—Ä–º–∞—Ç XX:XX
                hour, minute = map(int, time_str.split(':'))
            else:
                # –§–æ—Ä–º–∞—Ç XX –∏–ª–∏ X (—Ç–æ–ª—å–∫–æ —á–∞—Å)
                hour = int(time_str)
                minute = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            self.walk_time = f"{hour:02d}:{minute:02d}"
            self.last_walk_notification = None
            return True
        except (ValueError, TypeError):
            return False

    def get_walk_time(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏"""
        return self.walk_time

    def should_notify(self, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ–≥—É–ª–∫–µ"""
        if not self.walk_time:
            return None

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        walk_time = datetime.strptime(self.walk_time, "%H:%M").time()
        tz = pytz.timezone('Asia/Novosibirsk')
        walk_datetime = tz.localize(datetime.combine(current_time.date(), walk_time))
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if current_time.time() > walk_time:
            return None

        time_diff = walk_datetime - current_time
        minutes_until_walk = time_diff.total_seconds() / 60

        logging.info(f"Checking notifications for {self.name}:")
        logging.info(f"Current time: {current_time}")
        logging.info(f"Walk time: {walk_time}")
        logging.info(f"Minutes until walk: {minutes_until_walk}")
        logging.info(f"Last notification: {self.last_walk_notification}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if -1 <= minutes_until_walk <= 1:  # –¢–æ—á–Ω–æ –≤—Ä–µ–º—è (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é –≤ 1 –º–∏–Ω—É—Ç—É)
            if not self.last_walk_notification or \
                (current_time - tz.localize(datetime.fromisoformat(self.last_walk_notification))).total_seconds() > 60:
                self.last_walk_notification = current_time.isoformat()
                logging.info("Sending time to go notification")
                return "time_to_go"
        elif 59 <= minutes_until_walk <= 61:  # –ó–∞ —á–∞—Å
            if not self.last_walk_notification or \
                (current_time - tz.localize(datetime.fromisoformat(self.last_walk_notification))).total_seconds() > 3600:
                self.last_walk_notification = current_time.isoformat()
                logging.info("Sending hour notification")
                return "hour"
        elif 29 <= minutes_until_walk <= 31:  # –ó–∞ –ø–æ–ª—á–∞—Å–∞
            if not self.last_walk_notification or \
                (current_time - tz.localize(datetime.fromisoformat(self.last_walk_notification))).total_seconds() > 1800:
                self.last_walk_notification = current_time.isoformat()
                logging.info("Sending half hour notification")
                return "half_hour"
        elif 9 <= minutes_until_walk <= 11:  # –ó–∞ 10 –º–∏–Ω—É—Ç
            if not self.last_walk_notification or \
                (current_time - tz.localize(datetime.fromisoformat(self.last_walk_notification))).total_seconds() > 600:
                self.last_walk_notification = current_time.isoformat()
                logging.info("Sending 10 minutes notification")
                return "ten_minutes"
        
        return None

    def update_stats(self):
        current_time = datetime.now(pytz.timezone('Asia/Novosibirsk'))
        if not self.last_update:
            self.last_update = current_time.isoformat()
            return

        time_diff = current_time - datetime.fromisoformat(self.last_update)
        hours_passed = time_diff.total_seconds() / 3600

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 6 –∏–ª–∏ –±–æ–ª–µ–µ —á–∞—Å–æ–≤
        if hours_passed >= 6:
            # –ù–µ —É–º–µ–Ω—å—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ—á—å—é (—Å 22:00 –¥–æ 6:00)
            current_hour = current_time.hour
            if not (22 <= current_hour or current_hour < 6):
                periods_passed = int(hours_passed / 6)
                
                self.hunger = max(0, self.hunger - periods_passed)
                self.happiness = max(0, self.happiness - periods_passed)
                self.energy = max(0, self.energy - periods_passed)
            
            self.last_update = current_time.isoformat()

    def get_status(self):
        self.update_stats()
        return (
            f"{self.color.capitalize()} –∫–æ—Ç–∏–∫ {self.name.capitalize()}:\n"
            f"üçΩ –°—ã—Ç–æ—Å—Ç—å: {self.hunger}/4\n"
            f"üòä –°—á–∞—Å—Ç—å–µ: {self.happiness}/4\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {self.energy}/4"
        )

    def feed(self):
        if self.hunger >= 4:
            return f"–ö–æ—Ç–∏–∫ {self.name} –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!"
        self.hunger = min(4, self.hunger + 1)
        return f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ {self.name}!"

    def play(self):
        if self.happiness >= 4:
            return f"–ö–æ—Ç–∏–∫ {self.name} –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å!"
        if self.energy <= 1:
            return f"–ö–æ—Ç–∏–∫ {self.name} —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä!"
        self.happiness = min(4, self.happiness + 1)
        self.energy = max(0, self.energy - 1)
        return f"–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –∫–æ—Ç–∏–∫–æ–º {self.name}!"

    def sleep(self):
        self.update_stats()
        if self.energy >= 4:
            return "–ö–æ—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å! üëÄ"
        self.energy = min(4, self.energy + 1)
        return f"–ö–æ—Ç–∏–∫ {self.name} –ø–æ—Å–ø–∞–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–∏–ª—ã!"

    def get_status_image(self):
        self.update_stats()
        return self.image_generator.generate_status_image(
            self.color,
            self.name,
            self.hunger,
            self.happiness,
            self.energy,
            self.owner_m,
            self.owner_f,
            self.get_age_days()
        )

    def get_age_days(self):
        created = datetime.fromisoformat(self.created_at)
        if not created.tzinfo:
            created = pytz.timezone('Asia/Novosibirsk').localize(created)
        now = datetime.now(pytz.timezone('Asia/Novosibirsk'))
        days = (now - created).days
        return max(1, days)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å