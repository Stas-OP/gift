import logging
import json
import ssl
import certifi
import urllib3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
from cat import Cat

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_cats():
    try:
        with open('cats_data.json', 'r', encoding='utf-8') as file:
            try:
                data = json.load(file)
                loaded_cats = {}
                for user_id, cat_data in data.items():
                    cat = Cat(
                        cat_data['name'],
                        cat_data.get('color', '—Å–µ—Ä—ã–π'),
                        cat_data.get('owner_m', '–°—Ç–∞—Å'),
                        cat_data.get('owner_f', '–ú–∞—à–∞'),
                        cat_data.get('created_at')
                    )
                    cat.hunger = cat_data['hunger']
                    cat.happiness = cat_data['happiness']
                    cat.energy = cat_data['energy']
                    cat.last_update = cat_data['last_update']
                    loaded_cats[int(user_id)] = cat
                return loaded_cats
            except json.JSONDecodeError:
                return {}
    except FileNotFoundError:
        with open('cats_data.json', 'w', encoding='utf-8') as file:
            json.dump({}, file)
        return {}

def save_cats():
    data = {}
    for user_id, cat in cats.items():
        data[user_id] = {
            'name': cat.name,
            'color': cat.color,
            'owner_m': cat.owner_m,
            'owner_f': cat.owner_f,
            'hunger': cat.hunger,
            'happiness': cat.happiness,
            'energy': cat.energy,
            'last_update': cat.last_update,
            'created_at': cat.created_at
        }
    with open('cats_data.json', 'w', encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4, default=str)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cats = load_cats()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ç–∏–∫–∞
CHOOSING_NAME, CHOOSING_COLOR = range(2)

# –ò–∑–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π
CAT_COLORS = {
    "–°–µ—Ä—ã–π": "—Å–µ—Ä—ã–π",
    "–ë–µ–ª—ã–π": "–±–µ–ª—ã–π",
    "–†—ã–∂–∏–π": "—Ä—ã–∂–∏–π",
    "–ß—ë—Ä–Ω—ã–π": "—á—ë—Ä–Ω—ã–π"
}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å —Å–∫–ª–æ–Ω–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤
COLOR_CASES = {
    "—Å–µ—Ä—ã–π": "—Å–µ—Ä–æ–≥–æ",
    "–±–µ–ª—ã–π": "–±–µ–ª–æ–≥–æ",
    "—Ä—ã–∂–∏–π": "—Ä—ã–∂–µ–≥–æ",
    "—á—ë—Ä–Ω—ã–π": "—á—ë—Ä–Ω–æ–≥–æ"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in cats:
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ—Ç–∏–∫–∞! –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å?",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING_NAME
    else:
        await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ—Ç–∏–∫! üê±")
        await show_main_menu(update, context)
        return ConversationHandler.END

async def choose_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cat_name'] = update.message.text
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–°–µ—Ä—ã–π ü§ç", callback_data='color_—Å–µ—Ä—ã–π'),
            InlineKeyboardButton("–ë–µ–ª—ã–π ü§ç", callback_data='color_–±–µ–ª—ã–π')
        ],
        [
            InlineKeyboardButton("–†—ã–∂–∏–π ü§ç", callback_data='color_—Ä—ã–∂–∏–π'),
            InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π üñ§", callback_data='color_—á—ë—Ä–Ω—ã–π')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞:",
        reply_markup=reply_markup
    )
    return CHOOSING_COLOR

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
            InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
        ],
        [
            InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
    keyboard_button = ReplyKeyboardMarkup(
        [["üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º"]], 
        resize_keyboard=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    if query.data.startswith('color_'):
        if 'cat_name' not in context.user_data:
            await query.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start")
            return ConversationHandler.END
            
        color = query.data.replace('color_', '')
        cats[user_id] = Cat(context.user_data['cat_name'], color)
        save_cats()
        
        await query.message.edit_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! {color.capitalize()} –∫–æ—Ç–∏–∫ {context.user_data['cat_name'].capitalize()} –ø–æ—è–≤–∏–ª—Å—è —É –≤–∞—Å! üê±",
            reply_markup=keyboard_button
        )
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    if user_id not in cats:
        await query.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
        return

    cat = cats[user_id]
    cat.update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.delete()
    except:
        pass

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    message = ""
    if query.data == 'feed':
        message = cat.feed()
    elif query.data == 'play':
        message = cat.play()
    elif query.data == 'sleep':
        message = cat.sleep()
    elif query.data == 'status':
        message = "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∫–æ—Ç–∏–∫–∞:"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    image_path = cat.get_status_image()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    await query.message.reply_photo(
        photo=open(image_path, 'rb'),
        caption=f"{message}\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    
    save_cats()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("ÔøΩÔøΩ–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
            InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
        ],
        [
            InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
        ]
    ]
    inline_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
    keyboard_button = ReplyKeyboardMarkup(
        [["üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º"]], 
        resize_keyboard=True
    )
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            text="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="",
            reply_markup=keyboard_button
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É
        await update.message.reply_text(
            text="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="",
            reply_markup=keyboard_button
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏
async def handle_keyboard_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üê± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–º":
        user_id = update.effective_user.id
        if user_id not in cats:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞.")
            return

        cat = cats[user_id]
        cat.update_stats()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å üçΩ", callback_data='feed'),
                InlineKeyboardButton("–ü–æ–∏–≥—Ä–∞—Ç—å üéÆ", callback_data='play')
            ],
            [
                InlineKeyboardButton("–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å üò¥", callback_data='sleep'),
                InlineKeyboardButton("–°—Ç–∞—Ç—É—Å üìä", callback_data='status')
            ]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        image_path = cat.get_status_image()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –º–µ–Ω—é
        await update.message.reply_photo(
            photo=open(image_path, 'rb'),
            caption="–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å –∫–æ—Ç–∏–∫–æ–º?",
            reply_markup=inline_markup
        )

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder()\
        .token('7817658003:AAEnIHuifYCCoV7oXiSU-1tneodSh6EzNDU')\
        .build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ç–∏–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_name)],
            CHOOSING_COLOR: [CallbackQueryHandler(button_handler, pattern='^color_')],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyboard_button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()