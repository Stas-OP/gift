import time
from datetime import datetime, timedelta
import pytz
from image_generator import ImageGenerator

class Cat:
    def __init__(self, name, color="—Å–µ—Ä—ã–π", owner_m="–°—Ç–∞—Å", owner_f="–ú–∞—à–∞", created_at=None):
        self.name = name
        self.color = color
        self.owner_m = owner_m
        self.owner_f = owner_f
        self.hunger = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.happiness = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.energy = 4  # 0-4 –¥–µ–ª–µ–Ω–∏–π
        self.last_update = datetime.now(pytz.timezone('Asia/Novosibirsk')).isoformat()
        self.created_at = created_at or datetime.now(pytz.timezone('Asia/Novosibirsk')).isoformat()
        self.image_generator = ImageGenerator()

    def update_stats(self):
        current_time = datetime.now(pytz.timezone('Asia/Novosibirsk'))
        time_diff = current_time - datetime.fromisoformat(self.last_update)
        hours_passed = time_diff.total_seconds() / 3600

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 6 –∏–ª–∏ –±–æ–ª–µ–µ —á–∞—Å–æ–≤
        if hours_passed >= 6:
            # –ù–µ —É–º–µ–Ω—å—à–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ—á—å—é (—Å 22:00 –¥–æ 6:00)
            current_hour = current_time.hour
            if not (22 <= current_hour or current_hour < 6):
                periods_passed = int(hours_passed / 6)
                
                self.hunger = max(0, self.hunger - periods_passed)
                self.happiness = max(0, self.happiness - periods_passed)
                self.energy = max(0, self.energy - periods_passed)
            
            self.last_update = current_time.isoformat()

    def get_status(self):
        self.update_stats()
        return (
            f"{self.color.capitalize()} –∫–æ—Ç–∏–∫ {self.name.capitalize()}:\n"
            f"üçΩ –°—ã—Ç–æ—Å—Ç—å: {self.hunger}/4\n"
            f"üòä –°—á–∞—Å—Ç—å–µ: {self.happiness}/4\n"
            f"‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: {self.energy}/4"
        )

    def feed(self):
        if self.hunger >= 4:
            return f"–ö–æ—Ç–∏–∫ {self.name} –Ω–µ –≥–æ–ª–æ–¥–µ–Ω!"
        self.hunger = min(4, self.hunger + 1)
        return f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ –∫–æ—Ç–∏–∫–∞ {self.name}!"

    def play(self):
        if self.happiness >= 4:
            return f"–ö–æ—Ç–∏–∫ {self.name} –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å!"
        if self.energy <= 1:
            return f"–ö–æ—Ç–∏–∫ {self.name} —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –∏–≥—Ä!"
        self.happiness = min(4, self.happiness + 1)
        self.energy = max(0, self.energy - 1)
        return f"–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å –∫–æ—Ç–∏–∫–æ–º {self.name}!"

    def sleep(self):
        self.update_stats()
        if self.energy >= 4:
            return "–ö–æ—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å! üëÄ"
        self.energy = min(4, self.energy + 1)
        return f"–ö–æ—Ç–∏–∫ {self.name} –ø–æ—Å–ø–∞–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–∏–ª—ã!"

    def get_status_image(self):
        self.update_stats()
        return self.image_generator.generate_status_image(
            self.color,
            self.name,
            self.hunger,
            self.happiness,
            self.energy,
            self.owner_m,
            self.owner_f,
            self.get_age_days()
        )

    def get_age_days(self):
        created = datetime.fromisoformat(self.created_at)
        if not created.tzinfo:
            created = pytz.timezone('Asia/Novosibirsk').localize(created)
        now = datetime.now(pytz.timezone('Asia/Novosibirsk'))
        days = (now - created).days
        return max(1, days)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å